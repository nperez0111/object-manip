{"version":3,"sources":["../../src/lib/transforms.js"],"names":[],"mappings":"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","file":"transforms.js","sourcesContent":["import {\n    reducer,\n    createObj,\n    makeObj,\n    levelOfTransform,\n    traverse,\n    valueOf\n} from './utils';\n\nimport {\n    actualCopy,\n    parseRelocator\n} from './logic';\n\nimport {\n    isString,\n    curry,\n    isFunc,\n    isArray,\n    hasOwnProp,\n    isStringOrArr,\n    isObj\n} from './deps';\n\nlet hasDeepTransform = ( transformer, isDeep = true ) => {\n\n        let keys = Object.keys( transformer ),\n            values = keys.map( function ( cur ) {\n                return transformer[ cur ];\n            } );\n\n\n\n        return values.some( function ( cur ) {\n\n            if ( isStringOrArr( cur ) ) {\n\n                let s = isArray( cur ) ? cur[ 0 ] : cur;\n                return levelOfTransform( s ) > 1;\n\n            } else if ( isDeep && isObj( cur ) ) {\n\n                return hasDeepTransform( cur );\n\n            } else {\n                //i guess no other case is it relevant\n                return false;\n            }\n\n        } );\n    },\n    postTransform = ( transformer ) => {\n\n        return ( traverse( transformer, function ( value, i, key ) {\n\n            let val = null;\n\n            if ( isStringOrArr( value ) ) {\n\n                let s = isArray( value ) ? value[ 0 ] : value;\n                val = s.slice( levelOfTransform( s ) * 2 );\n\n                if ( isArray( value ) ) {\n                    val = [ val, value[ 1 ] ];\n                }\n\n            } else {\n\n                val = postTransform( value );\n\n            }\n\n            return createObj( key, val );\n\n        }, true ) );\n    },\n    findDeepNonTransforms = ( transformer ) => {\n\n        let passesTest = function ( value ) {\n\n            if ( !isObj( value ) ) {\n\n                if ( isStringOrArr( value ) ) {\n                    let s = isArray( value ) ? value[ 0 ] : value;\n                    return levelOfTransform( s ) < 2;\n\n                }\n\n                return true;\n\n            }\n\n            return findDeepNonTransforms( value ).length !== 0;\n\n        };\n        return traverse( transformer, function ( value, i, key ) {\n            if ( passesTest( value ) ) {\n\n                if ( !isObj( value ) ) {\n\n                    return createObj( key, value );\n\n                }\n\n                //look inside the val for non transforms\n                return createObj( key, reducer( findDeepNonTransforms( value ) ) );\n            }\n            return false;\n        } ).filter( function ( a ) {\n            return a !== false;\n        } );\n\n    },\n    findDeepTransforms = ( transformer, notTransforms = true ) => {\n\n        return traverse( transformer, function ( cur, i, value ) {\n            //[boolean checking if immediate values in the object have deeptransforms needed, index]\n            return [ hasDeepTransform( createObj( cur, value ), true ) === notTransforms, [ cur, value ] ];\n\n        }, false, true ).filter( function ( a ) {\n            return a[ 0 ];\n\n        } ).map( function ( cur ) {\n            let key = cur[ 1 ][ 0 ],\n                val = cur[ 1 ][ 1 ];\n\n            if ( isObj( val ) ) {\n\n                val = reducer( findDeepTransforms( val ) );\n\n            }\n\n            return createObj( key, val );\n\n        } );\n\n    },\n    deepTraversal = ( original ) => {\n\n        return ( traverse( original, function ( value, i, key ) {\n\n            let val = null;\n\n            if ( isStringOrArr( value ) ) {\n\n                let s = isArray( value ) ? value[ 0 ] : value,\n                    num = levelOfTransform( s );\n                val = [ ( s.slice( num * 2 ) ), num ];\n\n            } else {\n\n                val = deepTraversal( value )[ 0 ];\n                val[ 0 ] = `${key},${val[ 0 ]}`;\n\n            }\n\n            return val;\n\n        } ) );\n\n    };\n\nexport {\n    deepTraversal,\n    findDeepTransforms,\n    findDeepNonTransforms,\n    postTransform,\n    hasDeepTransform\n};\n"]}