{"version":3,"sources":["../../src/lib/typeCheck.js"],"names":[],"mappings":";;;;;QAgBgB,yB,GAAA,yB;QAmBA,4B,GAAA,4B;QAOA,mC,GAAA,mC;QAcA,qB,GAAA,qB;;AAxDhB;;AAKA;;AAWO,SAAS,yBAAT,CAAoC,WAApC,EAAkD;AACrD,WAAO,6BAAmB,WAAnB,EAAgC,EAAhC,EAAoC,UAAW,GAAX,EAAiB;AACxD,YAAK,oBAAU,GAAV,KAAmB,kBAAQ,GAAR,CAAxB,EAAwC;AACpC,mBAAO,KAAP;AACH;AACD,YAAK,mBAAS,GAAT,CAAL,EAAsB;AAClB,gBAAK,oBAAU,IAAK,CAAL,CAAV,CAAL,EAA4B;AACxB,uBAAO,KAAP;AACH;AACD,gBAAK,IAAI,MAAJ,IAAc,CAAnB,EAAuB;AACnB,oBAAK,oBAAU,IAAK,CAAL,CAAV,KAAwB,kBAAQ,IAAK,CAAL,CAAR,CAA7B,EAAkD;AAC9C,2BAAO,KAAP;AACH;AACJ;AACJ;AACD,eAAO,IAAP;AACH,KAfM,CAAP;AAgBH;;AAEM,SAAS,4BAAT,CAAuC,WAAvC,EAAqD;AACxD,QAAK,kBAAmB,WAAnB,KAAoC,0BAA2B,WAA3B,CAAzC,EAAoF;AAChF,eAAO,KAAP;AACH;AACD,WAAO,IAAP;AACH;;AAEM,SAAS,mCAAT,CAA8C,GAA9C,EAAmD,WAAnD,EAAiE;AACpE,QAAI,QAAQ,OAAO,IAAP,CAAa,WAAb,EAA2B,MAA3B,CAAmC,UAAW,GAAX,EAAiB;AAC5D,eAAO,sBAAY,GAAZ,EAAiB,GAAjB,CAAP;AACH,KAFW,CAAZ;;AAIA,WAAO,sBAAW,KAAX,EAAkB,MAAM,GAAN,CAAW,UAAW,GAAX,EAAiB;AACjD,YAAI,MAAM,YAAa,GAAb,CAAV;AACA,YAAK,iBAAO,GAAP,CAAL,EAAoB;AAChB,mBAAO,oCAAqC,IAAK,GAAL,CAArC,EAAiD,GAAjD,CAAP;AACH;AACD,eAAO,GAAP;AACH,KANwB,CAAlB,CAAP;AAOH;;AAEM,SAAS,qBAAT,CAAgC,IAAhC,EAAuC;AAC1C,QAAK,kBAAmB,IAAnB,CAAL,EAAiC;AAC7B,eAAO,KAAP;AACH;AACD,WAAO,IAAP;AACH;;AAED,SAAS,iBAAT,CAA4B,GAA5B,EAAkC;AAC9B,QAAK,iBAAO,GAAP,KAAgB,sBAAY,GAAZ,CAArB,EAAyC;AACrC;AACA,gBAAQ,IAAR,CAAc,yDAAd;AACA,eAAO,IAAP;AACH;AACD,WAAO,KAAP;AACH","file":"typeCheck.js","sourcesContent":["import {\n    traverse,\n    createObj\n} from './utils';\n\nimport {\n    isString,\n    isFunc,\n    isArray,\n    hasOwnProp,\n    isObj,\n    isCircular,\n    isInCorrectFormat,\n    is\n} from './deps';\n\nexport function transformerTypesInCorrect( transformer ) {\n    return isInCorrectFormat( transformer, {}, function ( val ) {\n        if ( isString( val ) || isFunc( val ) ) {\n            return false;\n        }\n        if ( isArray( val ) ) {\n            if ( isString( val[ 0 ] ) ) {\n                return false;\n            }\n            if ( val.length == 2 ) {\n                if ( isString( val[ 0 ] ) && isFunc( val[ 1 ] ) ) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    } )\n}\n\nexport function transformerIsInCorrectFormat( transformer ) {\n    if ( checkIfIsCircular( transformer ) || transformerTypesInCorrect( transformer ) ) {\n        return false;\n    }\n    return true;\n}\n\nexport function onlyPropertiesThatCorrespondBetween( obj, transformer ) {\n    let tKeys = Object.keys( transformer ).filter( function ( cur ) {\n        return hasOwnProp( obj, cur );\n    } );\n\n    return createObj( tKeys, tKeys.map( function ( key ) {\n        let val = transformer[ key ];\n        if ( isObj( val ) ) {\n            return onlyPropertiesThatCorrespondBetween( obj[ key ], val );\n        }\n        return val;\n    } ) );\n}\n\nexport function dataIsInCorrectFormat( data ) {\n    if ( checkIfIsCircular( data ) ) {\n        return false;\n    }\n    return true;\n}\n\nfunction checkIfIsCircular( obj ) {\n    if ( isObj( obj ) && isCircular( obj ) ) {\n        //just a check as this is a recursive method\n        console.warn( 'Circular reference found and is unsupported. exiting...' );\n        return true;\n    }\n    return false;\n}\n"]}